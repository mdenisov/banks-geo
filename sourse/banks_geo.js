// Generated by CoffeeScript 1.6.3
/*
@author: Maxim Denisov (denisovmax1988@yandex.ru)
@date: 19/10/2013
@version: 0.1
@copyright: Banki.ru (www.banki.ru)
*/

var BanksGeo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BanksGeo = (function() {
  function BanksGeo(container, options) {
    this.init = __bind(this.init, this);
    this._messages = {
      empty_map: 'Error: Empty map',
      empty_center: 'Error: Empty center',
      empty_zoom: 'Error: Empty zoom'
    };
    this.useCluster = true;
    this.useMapControl = true;
    if (container == null) {
      return this.log(this._messages.empty_map);
    }
    if (options.center == null) {
      return this.log(this._messages.empty_center);
    }
    if (options.zoom == null) {
      return this.log(this._messages.empty_zoom);
    }
    if (options.useCluster != null) {
      this.useCluster = options.useCluster === true ? true : false;
    }
    if (options.useMapControl != null) {
      this.useMapControl = options.useMapControl === true ? true : false;
    }
    if (container) {
      this.container = '#' + container;
      this.$container = $(this.container);
      this.center = options.center;
      this.zoom = options.zoom;
    }
    if (options.data != null) {
      if (typeof options.data === 'function') {
        this.log('1');
      }
      if (typeof options.data === 'object') {
        this.data = options.data;
      }
    }
    if (options.url != null) {
      if (typeof options.url === 'string') {
        this.url = options.url;
      }
    }
    ymaps.ready(this.init);
  }

  BanksGeo.prototype.init = function() {
    this.log('Initialize');
    this.map = new ymaps.Map(this.$container[0], {
      center: this.center,
      zoom: this.zoom
    });
    if (this.useMapControl === true) {
      this.map.controls.add('zoomControl', {
        left: 5,
        top: 5
      });
    }
    this.buildGeoCollection();
    this.processData();
    this.loadData();
    return this.addToMap(this.collection);
  };

  BanksGeo.prototype.buildGeoCollection = function() {
    if (this.useCluster === true) {
      return this.collection = new ymaps.Clusterer({
        preset: 'twirl#blackClusterIcons'
      });
    } else {
      return this.collection = new ymaps.GeoObjectCollection();
    }
  };

  BanksGeo.prototype.loadData = function() {
    var _this = this;
    if (this.url != null) {
      return $.ajax(this.url, {
        dataType: 'json',
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.log("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          _this.data = data;
          return _this.processData();
        }
      });
    }
  };

  BanksGeo.prototype.processData = function() {
    if ((this.data != null) && this.data.length > 0) {
      if (this.data.length > 500) {
        return this.processBigData();
      } else {
        return this.appendItemsToCollection(this.data);
      }
    }
  };

  BanksGeo.prototype.processBigData = function() {
    var tmp,
      _this = this;
    tmp = this.data.concat();
    return setTimeout(function() {
      var points;
      points = tmp.splice(0, 1000);
      _this.appendItemsToCollection(points);
      if (tmp.length > 0) {
        return setTimeout(arguments.callee, 25);
      }
    }, 25);
  };

  BanksGeo.prototype.buildGeoObject = function(object) {
    var icon;
    icon = ymaps.templateLayoutFactory.createClass('<div class="map__point $[properties.type] $[properties.main]" data-type="$[properties.type]">$[properties.icon_url]</div>', {
      build: function() {
        return icon.superclass.build.call(this);
      },
      clear: function() {
        return icon.superclass.clear.call(this);
      }
    });
    return new ymaps.Placemark([object.latitude, object.longitude], {
      id: object['id'],
      type: 'map__point--' + object.type,
      main: object.is_main === true ? 'map__point--main' : '',
      icon_url: object.icon_url != null ? '<img src="//banki.ru' + object.icon_url + '">' : '',
      hintContent: ''
    }, {
      hasHint: true,
      iconLayout: icon,
      balloonShadow: false
    });
  };

  BanksGeo.prototype.appendItemsToCollection = function(objects) {
    var i, iterations, _results;
    iterations = objects.length % 8;
    i = objects.length - 1;
    _results = [];
    while (iterations) {
      this.appendToCollection(this.buildGeoObject(objects[i--]));
      iterations--;
      iterations = Math.floor(objects.length / 8);
      _results.push((function() {
        var _results1;
        _results1 = [];
        while (iterations) {
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          this.appendToCollection(this.buildGeoObject(objects[i--]));
          _results1.push(iterations--);
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  BanksGeo.prototype.appendToCollection = function(object) {
    return this.collection.add(object);
  };

  BanksGeo.prototype.addToMap = function(object) {
    return this.map.geoObjects.add(object);
  };

  BanksGeo.prototype.log = function(message) {
    return console.log(message);
  };

  return BanksGeo;

})();
